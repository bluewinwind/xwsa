<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~
  ~ Copyright 2020 www.xinxindigits.com
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of this software
  ~ and associated documentation files (the "Software"),to deal in the Software without restriction,
  ~ including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
  ~ and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
  ~ subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice
  ~ shall be included in all copies or substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  ~ INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  ~ PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  ~ HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
  ~ WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  ~
  ~ Redistribution and selling copies of the software are prohibited, only if the authorization from xinxin digits
  ~ was obtained.Neither the name of the xinxin digits; nor the names of its contributors may be used to
  ~ endorse or promote products derived from this software without specific prior written permission.
  ~
  -->

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.com.xinxin.sass.repository.dao.CustomerReceivedDOMapper">
    <resultMap id="BaseResultMapExt" type="cn.com.xinxin.sass.repository.model.CustomerReceivedDO">
        <id column="id" jdbcType="BIGINT" property="id" />
        <result column="task_id" jdbcType="VARCHAR" property="taskId" />
        <result column="tenant_id" jdbcType="VARCHAR" property="tenantId" />
        <result column="member_user_id" jdbcType="VARCHAR" property="memberUserId" />
        <result column="user_id" jdbcType="VARCHAR" property="userId" />
        <result column="customer_name" jdbcType="VARCHAR" property="customerName" />
        <result column="avatar" jdbcType="VARCHAR" property="avatar" />
        <result column="customer_type" jdbcType="INTEGER" property="customerType" />
        <result column="gender" jdbcType="INTEGER" property="gender" />
        <result column="union_id" jdbcType="VARCHAR" property="unionId" />
        <result column="customer_position" jdbcType="VARCHAR" property="customerPosition" />
        <result column="corp_name" jdbcType="VARCHAR" property="corpName" />
        <result column="corp_full_name" jdbcType="VARCHAR" property="corpFullName" />
        <result column="external_profile" jdbcType="LONGVARCHAR" property="externalProfile" />
        <result column="follow_user" jdbcType="LONGVARCHAR" property="followUser" />
        <result column="extension" jdbcType="VARCHAR" property="extension" />
        <result column="gmt_created" jdbcType="TIMESTAMP" property="gmtCreated" />
        <result column="gmt_creator" jdbcType="VARCHAR" property="gmtCreator" />
        <result column="gmt_updated" jdbcType="TIMESTAMP" property="gmtUpdated" />
        <result column="gmt_updater" jdbcType="VARCHAR" property="gmtUpdater" />
        <result column="deleted" jdbcType="TINYINT" property="deleted" />
    </resultMap>
    <sql id="Base_Column_List_Ext">
    id, task_id, tenant_id, member_user_id, user_id, customer_name, avatar, customer_type, gender, union_id,
    customer_position, corp_name, corp_full_name, external_profile, follow_user, extension, 
    gmt_created, gmt_creator, gmt_updated, gmt_updater, deleted
  </sql>

    <insert id="insertBatch" parameterType="java.util.List">
        insert into customer_received (task_id, tenant_id, member_user_id,
        user_id, customer_name, avatar,
        customer_type, gender, union_id,
        customer_position, corp_name, corp_full_name,
        external_profile, follow_user, extension,
        gmt_created, gmt_creator, gmt_updated,
        gmt_updater)
        values
        <foreach collection="customerReceivedDOS" item="item" index="index" separator=",">
            (#{item.taskId,jdbcType=VARCHAR}, #{item.tenantId,jdbcType=VARCHAR}, #{item.memberUserId,jdbcType=VARCHAR},
            #{item.userId,jdbcType=VARCHAR}, #{item.customerName,jdbcType=VARCHAR}, #{item.avatar,jdbcType=VARCHAR},
            #{item.customerType,jdbcType=INTEGER}, #{item.gender,jdbcType=INTEGER}, #{item.unionId,jdbcType=VARCHAR},
            #{item.customerPosition,jdbcType=VARCHAR}, #{item.corpName,jdbcType=VARCHAR},
            #{item.corpFullName,jdbcType=VARCHAR},
            #{item.externalProfile,jdbcType=VARCHAR}, #{item.followUser,jdbcType=VARCHAR},
            #{item.extension,jdbcType=VARCHAR},
            #{item.gmtCreated,jdbcType=TIMESTAMP}, #{item.gmtCreator,jdbcType=VARCHAR},
            #{item.gmtUpdated,jdbcType=TIMESTAMP},
            #{item.gmtUpdater,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <select id="selectByTaskIdMemberUserIdS" resultMap="BaseResultMapExt">
        select <include refid="Base_Column_List_Ext"/>
        from customer_received
        where task_id = #{taskId} and member_user_id in
        <foreach collection="memberUserIdS" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
        and id <![CDATA[>]]> #{startId}
        and deleted = 0
        order by id
        limit #{pageSize}
    </select>

</mapper>