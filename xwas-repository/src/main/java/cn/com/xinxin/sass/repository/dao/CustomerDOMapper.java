package cn.com.xinxin.sass.repository.dao;

import cn.com.xinxin.sass.repository.model.CustomerDO;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface CustomerDOMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    int insert(CustomerDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    int insertSelective(CustomerDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    CustomerDO selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(CustomerDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table customer
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(CustomerDO record);

    /**
     * 通过机构id和客户userId查询客户信息
     * @param orgId 机构id
     * @param userIdS 客户userid
     * @return 客户信息
     */
    List<CustomerDO> selectByOrgIdAndUserId(@Param(value = "orgId") String orgId,
                                            @Param(value = "userIdS") List<String> userIdS);

    /**
     * 批量插入记录
     * @param customerDOS 客户信息
     * @return 成功插入数量
     */
    int insertBatch(@Param(value = "customerDOS") List<CustomerDO> customerDOS);

    /**
     * 批量更新数据
     * @param customerDOS 客户信息
     * @return 成功更新条数
     */
    int updateBatch(@Param(value = "customerDOS") List<CustomerDO> customerDOS);

    /**
     * 根据成员UserId列表，以及添加客户的时间范围查询成员添加的客户
     * @param memberUserIdS 成员UserId列表
     * @param startTime 起始时间
     * @param endTime 终止时间
     * @param index 页码
     * @param pageSize 页大小
     * @param orgId 机构id
     * @param customerName 客户名称
     * @return 分页查询的客户信息
     */
    List<CustomerDO> selectPageByOrgIdAndMemberUserIdSAndTimeAndCustName(
                                    @Param(value = "memberUserIdS") List<String> memberUserIdS,
                                   @Param(value = "startTime") String startTime,
                                   @Param(value = "endTime") String endTime,
                                   @Param(value = "index") Long index,
                                   @Param(value = "pageSize") Integer pageSize,
                                   @Param(value = "orgId") String orgId,
                                   @Param(value = "customerName") String customerName);

    /**
     * 根据成员UserId列表，以及添加客户的时间范围查询成员添加的客户数量
     * @param memberUserIdS 成员UserId列表
     * @param startTime 起始时间
     * @param endTime 终止时间
     * @param orgId 机构id
     * @param customerName 客户名称
     * @return 分页查询的客户信息
     */
    Long selectCountByOrgIdAndMemberUserIdSAndTimeAndCustName(@Param(value = "memberUserIdS") List<String> memberUserIdS,
                                                  @Param(value = "startTime") String startTime,
                                                  @Param(value = "endTime") String endTime,
                                                  @Param(value = "orgId") String orgId,
                                                  @Param(value = "customerName") String customerName);


    /**
     *
     * @return
     */
    List<CustomerDO> queryAllCustomerByPages();




}