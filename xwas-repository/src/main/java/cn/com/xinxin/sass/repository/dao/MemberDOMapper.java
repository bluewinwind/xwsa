package cn.com.xinxin.sass.repository.dao;

/*
 *
 * Copyright 2020 www.xinxindigits.com
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software
 * and associated documentation files (the "Software"),to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice
 * shall be included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 * Redistribution and selling copies of the software are prohibited, only if the authorization from xinxin digits
 * was obtained.Neither the name of the xinxin digits; nor the names of its contributors may be used to
 * endorse or promote products derived from this software without specific prior written permission.
 *
 */

import cn.com.xinxin.sass.repository.model.MemberDO;
import org.apache.ibatis.annotations.Param;

import java.util.List;

public interface MemberDOMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    int insert(MemberDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    int insertSelective(MemberDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    MemberDO selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(MemberDO record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table member
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(MemberDO record);

    /**
     * 通过机构id和用户id查询记录
     * @param tenantId 机构id
     * @param userIdS 用户id
     * @return 成员列表
     */
    List<MemberDO> queryByOrgIdAndUserId(@Param(value = "tenantId") String tenantId,
                                         @Param(value = "userIdS") List<String> userIdS);

    /**
     * 批量插入
     * @param memberDOS 成员列表
     * @return 插入成功数量
     */
    int insertBatch(@Param(value = "memberDOS") List<MemberDO> memberDOS);

    /**
     * 批量更新
     * @param memberDOS 成员列表
     * @return 更新成功数量
     */
    int updateBatchById(@Param(value = "memberDOS") List<MemberDO> memberDOS);


    /**
     *
     * @param deptId
     * @return
     */
    List<MemberDO> queryDeptId(@Param("deptId") String deptId);

    /**
     *
     * @return
     */
    List<MemberDO> queryAllMembersByPage();


    /**
     * @param deptIds
     * @return
     */
    List<MemberDO> queryDeptIdList(@Param("deptIds") List<String> deptIds);


    /**
     *
     * @param memberName
     * @param mobile
     * @return
     */
    List<MemberDO> queryByNameAndMobile(@Param("memberName")String memberName,
                                        @Param("mobile") String mobile);

    /**
     * 将记录状态置为失效
     * @param tenantId 租户id
     * @param taskId 任务流水
     * @return 成功更新的条数
     */
    int updateInactiveStatus(@Param(value = "tenantId") String tenantId, @Param(value = "taskId") String taskId);


    /**
     *
     * @param userId
     * @return
     */
    MemberDO queryByUserId(@Param("userId")String userId);

    /**
     * 查询成员用户名
     * @param tenantId 租户id
     * @param userIdS 成员userids
     * @return 成员用户名及userid
     */
    List<MemberDO> queryMemberNameByTenantIdAndUserIdS(@Param(value = "tenantId") String tenantId,
                                         @Param(value = "userIdS") List<String> userIdS);

}